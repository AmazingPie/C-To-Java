/* Generated by C-To-Java using CIL v. */
import java.util.Scanner;
public class benchmark { 
public static void main(String[] args) /* comes from pVDecl with beginsFunDef; vinline is really false and the varinfo, magic 70076510180324, also has 0 entries in vvardecls */ 
{ 
  long start ;
  long time;
  Scanner in = new Scanner(System.in);
  int input ;
  double runs ;
  int ans ;
  int z ;
  int a ;
  int b ;
  int c ;
  int d ;
  int e ;
  int f ;
  int g ;
  int []hh = new int [1];
  int hh_offset = 0 ;
  int []ii = new int [1];
  int ii_offset = 0 ;
  int []jj = new int [1];
  int jj_offset = 0 ;
  int []kk = new int [1];
  int kk_offset = 0 ;
  int []ll = new int [1];
  int ll_offset = 0 ;
  int []mm = new int [1];
  int mm_offset = 0 ;
  int []nn = new int [1];
  int nn_offset = 0 ;
  double time___0 ;

  {
//#line  9 "/home/chris/git/C-To-Java/examples/benchmark.c"
  input = 0;
//#line  10
  start = 0;
  input = in.nextInt();
//#line  11
  runs = (double )10000;
//#line  12
  ans = 0;
//#line  15
  z = -10000;
  while ((double )z < runs) {
    if (z==0) start = System.nanoTime();
//#line  19
  int []h = new int [1];
  int h_offset = 0 ;
  int []tmp ;
  int []i = new int [1];
  int i_offset = 0 ;
  int []tmp___0 ;
  int []j = new int [1];
  int j_offset = 0 ;
  int []tmp___1 ;
  int []k = new int [1];
  int k_offset = 0 ;
  int []tmp___2 ;
  int []l = new int [1];
  int l_offset = 0 ;
  int []tmp___3 ;
  int []m = new int [1];
  int m_offset = 0 ;
  int []tmp___4 ;
  int []n = new int [1];
  int n_offset = 0 ;
  int []tmp___5 ;

    a = input + 42;
//#line  20
    b = input - 519234;
//#line  21
    c = input + 13284713;
//#line  22
    d = input - 91893;
//#line  23
    e = input + 124782;
//#line  24
    f = input - 12934;
//#line  25
    g = input + 124908;
//#line  27
    tmp = new int [((10 * 4)) / 4];
    h = (int[] )tmp;
//#line  28
    tmp___0 = new int [((5 * 4)) / 4];
    i = (int[] )tmp___0;
//#line  29
    tmp___1 = new int [((2 * 4)) / 4];
    j = (int[] )tmp___1;
//#line  30
    tmp___2 = new int [((10 * 4)) / 4];
    k = (int[] )tmp___2;
//#line  31
    tmp___3 = new int [((20 * 4)) / 4];
    l = (int[] )tmp___3;
//#line  32
    tmp___4 = new int [((100 * 4)) / 4];
    m = (int[] )tmp___4;
//#line  33
    tmp___5 = new int [((150 * 4)) / 4];
    n = (int[] )tmp___5;
//#line  35
    hh = h;
//#line  36
    ii = i;
//#line  37
    jj = j;
//#line  38
    kk = k;
//#line  39
    ll = l;
//#line  40
    mm = m;
//#line  41
    nn = n;
//#line  43
    h[h_offset] = a;
//#line  44
    i[i_offset] = b;
//#line  45
    j[j_offset] = c;
//#line  46
    k[k_offset] = d;
//#line  47
    l[l_offset] = e;
//#line  48
    m[m_offset] = f;
//#line  49
    n[n_offset] = g;
//#line  51
    h[h_offset] = e;
//#line  52
    i[i_offset] = a;
//#line  53
    j[j_offset] = f;
//#line  54
    k[k_offset] = 1324;
//#line  55
    l[l_offset] = 13908;
//#line  56
    m[m_offset] = 7185612;
//#line  57
    n[n_offset] = 19833;
//#line  58
    h[h_offset] = k[k_offset];
//#line  59
    l[l_offset] = i[i_offset];
//#line  60
    n[n_offset] = m[m_offset];
//#line  62
    k_offset ++;
//#line  63
    l_offset ++;
//#line  64
    m_offset ++;
//#line  65
    n_offset ++;
//#line  66
    n_offset ++;
//#line  67
    n_offset ++;
//#line  68
    n_offset ++;
//#line  69
    h_offset ++;
//#line  71
    k = k;
    k_offset = k_offset + 4;
//#line  72
    l = l;
    l_offset = l_offset + (2 + 4) + 8;
//#line  73
    m = m;
    m_offset = m_offset + 52;
//#line  74
    n = n;
    n_offset = n_offset + 72;
//#line  75
    h = h;
    h_offset = h_offset + ((2 + 2) + 2) + 2;
//#line  76
    ans = (((((h[h_offset] + i[i_offset]) + j[j_offset]) + k[k_offset]) + l[l_offset]) + m[m_offset]) + n[n_offset];
//#line  78

//#line  79

//#line  80

//#line  81

//#line  82

//#line  83

//#line  84

//#line  15
    z ++;
  }
//#line  87
  time = System.nanoTime() - start;
  System.out.print(time + ";");
  //System.out.println("Average Time: "+time/runs+"ns\n");
//#line  66
  //System.out.println("Result: "+ans+"\n");
}
}
}